/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 17 13:42:57 GMT 2023
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.InvalidPathException;
import java.util.List;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.Environment;
import sg.edu.nus.comp.cs4218.impl.util.RegexArgument;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RegexArgument_ESTest extends RegexArgument_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(RegexArgument_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      RegexArgument regexArgument1 = new RegexArgument(".*", "QUEQUEQupI!TLvEEQUH6luE", true);
      regexArgument0.merge(regexArgument1);
      regexArgument0.toString();
      assertFalse(regexArgument0.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      RegexArgument regexArgument1 = new RegexArgument("ICf78XomWW", "", true);
      regexArgument0.merge(regexArgument1);
      boolean boolean0 = regexArgument0.isRegex();
      assertFalse(regexArgument0.isEmpty());
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument("", "", true);
      // Undeclared exception!
      try { 
        regexArgument0.merge((RegexArgument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.RegexArgument", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      // Undeclared exception!
      try { 
        regexArgument0.merge((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument("[^%s]*");
      Environment.currentDirectory = "W!y9AN{.i";
      regexArgument0.appendAsterisk();
      // Undeclared exception!
      try { 
        regexArgument0.globFiles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.RegexArgument", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      RegexArgument regexArgument0 = null;
      try {
        regexArgument0 = new RegexArgument((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.RegexArgument", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      RegexArgument regexArgument0 = null;
      try {
        regexArgument0 = new RegexArgument((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument("", "", false);
      regexArgument0.appendAsterisk();
      RegexArgument regexArgument1 = new RegexArgument("", ":/Uo^", false);
      regexArgument0.merge(regexArgument1);
      // Undeclared exception!
      try { 
        regexArgument0.globFiles();
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      regexArgument0.merge("?(jsItDz(b8");
      assertFalse(regexArgument0.isRegex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      boolean boolean0 = regexArgument0.isRegex();
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      boolean boolean0 = regexArgument0.isEmpty();
      assertFalse(regexArgument0.isRegex());
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      assertTrue(regexArgument0.isEmpty());
      
      regexArgument0.append('5');
      boolean boolean0 = regexArgument0.isEmpty();
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      regexArgument0.merge(regexArgument0);
      assertFalse(regexArgument0.isRegex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument("[^%s]*", "[^%s]*", true);
      assertTrue(regexArgument0.isRegex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument("", "", true);
      List<String> list0 = regexArgument0.globFiles();
      assertEquals(16, list0.size());
      assertFalse(list0.contains(""));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      regexArgument0.toString();
      assertFalse(regexArgument0.isRegex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test16()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      regexArgument0.globFiles();
      assertFalse(regexArgument0.isRegex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test17()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument();
      regexArgument0.append(';');
      RegexArgument regexArgument1 = new RegexArgument("", "", true);
      regexArgument1.merge(regexArgument0);
      assertFalse(regexArgument0.isRegex());
      
      List<String> list0 = regexArgument1.globFiles();
      assertFalse(list0.contains(""));
      assertEquals(1, list0.size());
      assertTrue(regexArgument1.isRegex());
  }
}
