/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 17 13:34:52 GMT 2023
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.file.InvalidPathException;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IORedirectionHandler_ESTest extends IORedirectionHandler_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(IORedirectionHandler_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      List<String> list0 = List.of("", "", "", "", "~c0", ">", "~c0");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(list0, pipedInputStream0, (OutputStream) null);
      iORedirectionHandler0.extractRedirOptions();
      OutputStream outputStream0 = iORedirectionHandler0.getOutputStream();
      assertNotNull(outputStream0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      List<String> list0 = List.of("", "", "", "", "~c0", "'TD.c0^M)n[C_D", "~c0");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(list0, pipedInputStream0, (OutputStream) null);
      iORedirectionHandler0.extractRedirOptions();
      List<String> list1 = iORedirectionHandler0.getNoRedirArgsList();
      assertTrue(list1.contains("~c0"));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(linkedList0, (InputStream) null, (OutputStream) null);
      InputStream inputStream0 = iORedirectionHandler0.getInputStream();
      assertNull(inputStream0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      List<String> list0 = List.of(">", "I;1/6Z V[Y*,Jz", "", "Invalid syntax", "PeJ.2SdUB", "Unable to close streams", "Unable to close streams");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(list0, pipedInputStream0, (OutputStream) null);
      // Undeclared exception!
      try { 
        iORedirectionHandler0.extractRedirOptions();
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(linkedList0, (InputStream) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        iORedirectionHandler0.extractRedirOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      List<String> list0 = List.of("", "", "", "", "", ">", "");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(list0, pipedInputStream0, (OutputStream) null);
      // Undeclared exception!
      try { 
        iORedirectionHandler0.extractRedirOptions();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      List<String> list0 = List.of("A", "A", "A", "x5/yo", "<", "A", "<");
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(list0, (InputStream) null, (OutputStream) null);
      try { 
        iORedirectionHandler0.extractRedirOptions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: No such file or directory
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      List<String> list0 = List.of(">", ">", ">", ">", ">", ">", ">");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(list0, pipedInputStream0, pipedOutputStream0);
      try { 
        iORedirectionHandler0.extractRedirOptions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid Filename
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(">");
      linkedList0.offerLast("\",M");
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(linkedList0, (InputStream) null, (OutputStream) null);
      iORedirectionHandler0.extractRedirOptions();
      List<String> list0 = iORedirectionHandler0.getNoRedirArgsList();
      assertFalse(list0.contains(">"));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(">");
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(linkedList0, (InputStream) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        iORedirectionHandler0.extractRedirOptions();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(linkedList0, (InputStream) null, (OutputStream) null);
      try { 
        iORedirectionHandler0.extractRedirOptions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler((List<String>) null, pipedInputStream0, (OutputStream) null);
      try { 
        iORedirectionHandler0.extractRedirOptions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      List<String> list0 = List.of("", "", "", "", "~c0", ">", "~c0");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(list0, pipedInputStream0, (OutputStream) null);
      OutputStream outputStream0 = iORedirectionHandler0.getOutputStream();
      assertNull(outputStream0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      List<String> list0 = List.of("", "", "", "", "~c0", ">", "~c0");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(list0, pipedInputStream0, (OutputStream) null);
      InputStream inputStream0 = iORedirectionHandler0.getInputStream();
      assertSame(pipedInputStream0, inputStream0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler(linkedList0, (InputStream) null, (OutputStream) null);
      List<String> list0 = iORedirectionHandler0.getNoRedirArgsList();
      assertNull(list0);
  }
}
