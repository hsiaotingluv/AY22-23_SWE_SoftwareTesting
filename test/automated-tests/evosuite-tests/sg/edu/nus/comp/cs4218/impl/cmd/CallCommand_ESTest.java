/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 18 17:28:27 GMT 2023
 */

package sg.edu.nus.comp.cs4218.impl.cmd;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.cmd.CallCommand;
import sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner;
import sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CallCommand_ESTest extends CallCommand_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(CallCommand_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3344, 1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      linkedList0.add("ls");
      IORedirectionHandler iORedirectionHandler0 = callCommand0.getIORedirection(byteArrayInputStream0, objectOutputStream0);
      assertNotNull(iORedirectionHandler0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand((List<String>) null, applicationRunner0);
      List<String> list0 = callCommand0.getArgsList();
      assertNull(list0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      linkedList0.add("ls");
      List<String> list0 = callCommand0.getArgsList();
      assertTrue(list0.contains("ls"));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = new Locale("grep", "grep", "grep");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(list0, applicationRunner0);
      List<String> list1 = callCommand0.getArgsList();
      assertSame(list0, list1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 794, 13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      linkedList0.add((String) null);
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      // Undeclared exception!
      try { 
        callCommand0.getIORedirection(byteArrayInputStream0, pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      linkedList0.offerLast("wc");
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        callCommand0.evaluate(pipedInputStream0, pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // wc: wc: Pipe not connected
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.WcApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast((String) null);
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        callCommand0.evaluate(pipedInputStream0, pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("");
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      OutputStream outputStream0 = OutputStream.nullOutputStream();
      callCommand0.evaluate(pipedInputStream0, outputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      linkedList0.add("ls");
      try { 
        callCommand0.evaluate(pipedInputStream0, objectOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Unable to close streams
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      try { 
        callCommand0.evaluate(pipedInputStream0, objectOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.cmd.CallCommand", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      OutputStream outputStream0 = OutputStream.nullOutputStream();
      CallCommand callCommand0 = new CallCommand((List<String>) null, applicationRunner0);
      try { 
        callCommand0.evaluate(pipedInputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.cmd.CallCommand", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3344, 1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      try { 
        callCommand0.getIORedirection(byteArrayInputStream0, objectOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand((List<String>) null, applicationRunner0);
      callCommand0.terminate();
  }
}
