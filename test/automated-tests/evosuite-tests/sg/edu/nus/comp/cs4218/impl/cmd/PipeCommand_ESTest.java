/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 18 17:45:42 GMT 2023
 */

package sg.edu.nus.comp.cs4218.impl.cmd;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.cmd.CallCommand;
import sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand;
import sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PipeCommand_ESTest extends PipeCommand_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(PipeCommand_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0()  throws Throwable  {
      PipeCommand pipeCommand0 = new PipeCommand((List<CallCommand>) null);
      List<CallCommand> list0 = pipeCommand0.getCallCommands();
      assertNull(list0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1()  throws Throwable  {
      LinkedList<CallCommand> linkedList0 = new LinkedList<CallCommand>();
      PipeCommand pipeCommand0 = new PipeCommand(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList1, applicationRunner0);
      linkedList0.add(callCommand0);
      List<CallCommand> list0 = pipeCommand0.getCallCommands();
      assertFalse(list0.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2()  throws Throwable  {
      LinkedList<CallCommand> linkedList0 = new LinkedList<CallCommand>();
      List<String> list0 = List.of("", "", "");
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(list0, applicationRunner0);
      linkedList0.add(callCommand0);
      PipeCommand pipeCommand0 = new PipeCommand(linkedList0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        pipeCommand0.evaluate(pipedInputStream0, bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(linkedList0, applicationRunner0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      List<CallCommand> list0 = List.of(callCommand0, callCommand0, callCommand0, callCommand0);
      PipeCommand pipeCommand0 = new PipeCommand(list0);
      try { 
        pipeCommand0.evaluate(pipedInputStream0, byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.cmd.CallCommand", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test4()  throws Throwable  {
      LinkedList<CallCommand> linkedList0 = new LinkedList<CallCommand>();
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      List<String> list0 = List.of("cat", "wc", "ls");
      CallCommand callCommand0 = new CallCommand(list0, applicationRunner0);
      linkedList0.add(callCommand0);
      linkedList0.add(callCommand0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipeCommand pipeCommand0 = new PipeCommand(linkedList0);
      try { 
        pipeCommand0.evaluate((InputStream) null, byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cat: wc: No such file or directory
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CatApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test5()  throws Throwable  {
      List<String> list0 = List.of("", "", "");
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(list0, applicationRunner0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      List<CallCommand> list1 = List.of(callCommand0, callCommand0, callCommand0, callCommand0);
      PipeCommand pipeCommand0 = new PipeCommand(list1);
      pipeCommand0.evaluate(pipedInputStream0, byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test6()  throws Throwable  {
      LinkedList<CallCommand> linkedList0 = new LinkedList<CallCommand>();
      PipeCommand pipeCommand0 = new PipeCommand(linkedList0);
      List<CallCommand> list0 = pipeCommand0.getCallCommands();
      assertTrue(list0.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test7()  throws Throwable  {
      PipeCommand pipeCommand0 = new PipeCommand((List<CallCommand>) null);
      pipeCommand0.terminate();
  }
}
