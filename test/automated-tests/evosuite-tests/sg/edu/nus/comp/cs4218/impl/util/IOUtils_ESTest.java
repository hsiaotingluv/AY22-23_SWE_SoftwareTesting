/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 17 13:32:47 GMT 2023
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Path;
import java.util.List;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.util.IOUtils;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(IOUtils_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      try { 
        IOUtils.openOutputStream("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: No such file or directory
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      try { 
        IOUtils.openInputStream("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: No such file or directory
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      Path path0 = IOUtils.resolveFilePath("");
      assertNotNull(path0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      IOUtils.openOutputStream(" uEmg}EY2B");
      InputStream inputStream0 = IOUtils.openInputStream(" uEmg}EY2B");
      assertEquals(0, inputStream0.available());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-1));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      List<String> list0 = IOUtils.getLinesFromInputStream(dataInputStream0);
      assertEquals(0, list0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      try { 
        IOUtils.resolveFilePath("cs?8TNvlq#P60G4d,");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid Filename
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.openOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getLinesFromInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      OutputStream outputStream0 = IOUtils.openOutputStream("Stream is closed");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        IOUtils.closeOutputStream(outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Unable to close streams
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        IOUtils.closeOutputStream(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      IOUtils.openOutputStream("Stream is closed");
      MockFile mockFile0 = new MockFile("Stream is closed");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      try { 
        IOUtils.closeInputStream(mockFileInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Unable to close streams
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        IOUtils.closeInputStream(bufferedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resolveFilePath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      List<String> list0 = IOUtils.getLinesFromInputStream(byteArrayInputStream0);
      assertFalse(list0.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      OutputStream outputStream0 = IOUtils.openOutputStream("Stream is closed");
      IOUtils.closeOutputStream(outputStream0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      IOUtils.closeOutputStream((OutputStream) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test16()  throws Throwable  {
      IOUtils.closeInputStream((InputStream) null);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test17()  throws Throwable  {
      IOUtils.openOutputStream("Stream is closed");
      MockFile mockFile0 = new MockFile("Stream is closed");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOUtils.closeInputStream(mockFileInputStream0);
      try { 
        IOUtils.getLinesFromInputStream(mockFileInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Stream is closed
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.openInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
