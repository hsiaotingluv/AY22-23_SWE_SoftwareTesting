/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 18 19:15:41 GMT 2023
 */

package sg.edu.nus.comp.cs4218.impl.cmd;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.Command;
import sg.edu.nus.comp.cs4218.impl.cmd.CallCommand;
import sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand;
import sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SequenceCommand_ESTest extends SequenceCommand_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(SequenceCommand_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(list0, applicationRunner0);
      List<Command> list1 = List.of((Command) callCommand0);
      SequenceCommand sequenceCommand0 = new SequenceCommand(list1);
      InputStream inputStream0 = InputStream.nullInputStream();
      MockFile mockFile0 = new MockFile("d~+nX|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      sequenceCommand0.evaluate(inputStream0, mockFileOutputStream0);
      assertEquals(23L, mockFile0.length());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1()  throws Throwable  {
      SequenceCommand sequenceCommand0 = new SequenceCommand((List<Command>) null);
      List<Command> list0 = sequenceCommand0.getCommands();
      assertNull(list0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      SequenceCommand sequenceCommand0 = new SequenceCommand(linkedList0);
      List<Command> list0 = sequenceCommand0.getCommands();
      assertEquals(0, list0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test3()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      SequenceCommand sequenceCommand0 = new SequenceCommand(linkedList0);
      linkedList0.add((Command) sequenceCommand0);
      List<Command> list0 = sequenceCommand0.getCommands();
      assertEquals(1, list0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test4()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      SequenceCommand sequenceCommand0 = new SequenceCommand(linkedList0);
      List<Command> list0 = List.of((Command) sequenceCommand0);
      SequenceCommand sequenceCommand1 = new SequenceCommand(list0);
      InputStream inputStream0 = InputStream.nullInputStream();
      OutputStream outputStream0 = OutputStream.nullOutputStream();
      outputStream0.close();
      try { 
        sequenceCommand1.evaluate(inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Stream closed
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test5()  throws Throwable  {
      SequenceCommand sequenceCommand0 = new SequenceCommand((List<Command>) null);
      InputStream inputStream0 = InputStream.nullInputStream();
      OutputStream outputStream0 = OutputStream.nullOutputStream();
      // Undeclared exception!
      try { 
        sequenceCommand0.evaluate(inputStream0, outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.cmd.SequenceCommand", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test6()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      CallCommand callCommand0 = new CallCommand(list0, applicationRunner0);
      List<Command> list1 = List.of((Command) callCommand0);
      SequenceCommand sequenceCommand0 = new SequenceCommand(list1);
      sequenceCommand0.terminate();
  }
}
