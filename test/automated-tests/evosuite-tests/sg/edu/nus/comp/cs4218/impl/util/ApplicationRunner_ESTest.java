/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 17 13:30:23 GMT 2023
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.Application;
import sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ApplicationRunner_ESTest extends ApplicationRunner_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(ApplicationRunner_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      MockFile mockFile0 = new MockFile((File) null, "wc");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[0];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "paste";
      stringArray0[1] = "sort";
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      applicationRunner0.runApp("wc", stringArray0, byteArrayInputStream0, bufferedOutputStream0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "grep";
      stringArray0[1] = "";
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 59);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        applicationRunner0.runApp("sort", stringArray0, pushbackInputStream0, pipedOutputStream0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      // Undeclared exception!
      try { 
        applicationRunner0.getApplication((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("exit");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      try { 
        applicationRunner0.getApplication("v?aF%kEtd=,i3|5S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: v?aF%kEtd=,i3|5S: Invalid app
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("sort");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[0];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        applicationRunner0.runApp("", stringArray0, pipedInputStream0, byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: : Invalid app
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("paste");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("uniq");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[2];
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 59);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        applicationRunner0.runApp("sort", stringArray0, pushbackInputStream0, pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.parser.ArgsParser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("grep");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("echo");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("tee");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("cut");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("cat");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("wc");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test16()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("rm");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test17()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("mv");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test18()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("ls");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test19()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("cp");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test20()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      Application application0 = applicationRunner0.getApplication("cd");
      assertNotNull(application0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test21()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[2];
      InputStream inputStream0 = InputStream.nullInputStream();
      try { 
        applicationRunner0.runApp("exit", stringArray0, inputStream0, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // exit: 0
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.ExitApplication", e);
      }
  }
}
