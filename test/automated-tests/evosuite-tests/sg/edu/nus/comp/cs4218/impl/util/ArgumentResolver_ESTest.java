/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 17 13:40:45 GMT 2023
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.InvalidPathException;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;
import sg.edu.nus.comp.cs4218.impl.util.ArgumentResolver;
import sg.edu.nus.comp.cs4218.impl.util.RegexArgument;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArgumentResolver_ESTest extends ArgumentResolver_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(ArgumentResolver_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      RegexArgument regexArgument0 = new RegexArgument("CWM{5PPmH`&sGSA^%i", "EQYO\"", true);
      regexArgument0.append('\'');
      List<String> list0 = regexArgument0.globFiles();
      List<String> list1 = ArgumentResolver.parseArguments(list0);
      assertNotSame(list1, list0);
      assertFalse(list1.contains("EQYO\""));
      assertFalse(list1.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = ArgumentResolver.parseArguments(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArgumentResolver.resolveOneArgument("(x;/0{fhC#*hO+e5K!");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArgumentResolver.resolveOneArgument((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ArgumentResolver", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      List<String> list0 = List.of("Q1pg|wf]Ngx}Hr", "12", "java.io.ByteArrayOutputStream@0000000013", "12", "C", "12", "A<i|`}@`t6+");
      try { 
        ArgumentResolver.parseArguments(list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: }@: Invalid app
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("L@=i~[X/*Q5gQ4gV7O");
      // Undeclared exception!
      try { 
        ArgumentResolver.parseArguments(linkedList0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArgumentResolver.parseArguments((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ArgumentResolver", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArgumentResolver.makeRegexArgument((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      try { 
        ArgumentResolver.evaluateSubCommand("grep");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // grep: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.GrepApplication", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArgumentResolver.evaluateSubCommand("Ja~)&*U%>;_w");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArgumentResolver.evaluateSubCommand("mI>1i/*P");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      LinkedList<RegexArgument> linkedList0 = new LinkedList<RegexArgument>();
      ArgumentResolver.appendParsedArgIntoSegment(linkedList0, (RegexArgument) null);
      // Undeclared exception!
      try { 
        ArgumentResolver.appendParsedArgIntoSegment(linkedList0, (RegexArgument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ArgumentResolver", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      String string0 = ArgumentResolver.evaluateSubCommand("");
      assertEquals("", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      try { 
        ArgumentResolver.evaluateSubCommand("Ja~)&*U%>_w");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Ja~)&*U%: Invalid app
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      List<String> list0 = ArgumentResolver.resolveOneArgument("cut");
      assertTrue(list0.contains("cut"));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      RegexArgument regexArgument0 = ArgumentResolver.makeRegexArgument();
      assertFalse(regexArgument0.isRegex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test16()  throws Throwable  {
      List<String> list0 = ArgumentResolver.resolveOneArgument("`A'/wmd");
      assertEquals(0, list0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test17()  throws Throwable  {
      List<String> list0 = ArgumentResolver.resolveOneArgument("9iVY3xb`/JR'QeSR");
      assertEquals(1, list0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test18()  throws Throwable  {
      List<String> list0 = ArgumentResolver.resolveOneArgument("vV9N_\"f,|W`?");
      List<String> list1 = ArgumentResolver.parseArguments(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(list0.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test19()  throws Throwable  {
      try { 
        ArgumentResolver.resolveOneArgument("([^'\"`|<>;s]+|'[^']*'|\"([^\"`]*`.*?`[^\"`]*)+\"|\"[^\"]*\"|`[^`]*`)+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: ]*: Invalid app
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test20()  throws Throwable  {
      RegexArgument regexArgument0 = ArgumentResolver.makeRegexArgument("+^r+m@-('O@YY(v");
      assertFalse(regexArgument0.isRegex());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test21()  throws Throwable  {
      String string0 = ArgumentResolver.evaluateSubCommand("H`` G0)5;$,");
      assertNotNull(string0);
  }
}
